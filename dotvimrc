set nocompatible
set noswapfile
set enc=utf-8  " UTF-8 Default encoding
set history=9000
set ruler
set rulerformat=%l:%c ruler " Display current column/line
set ignorecase
set smartcase
set incsearch
set hlsearch
set backspace=indent,eol,start
set scrolloff=6
set laststatus=2
noremap <space> :
set whichwrap=h,l,~,[,]

" u for undo, U for redo
nnoremap U <c-r>

set timeoutlen=1000 ttimeoutlen=0 " remove <esc> delay from insert mode

" to install plugins, run:
" :InstallPlugins
call plug#begin('~/.vim/plugged')
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'kien/ctrlp.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'altercation/vim-colors-solarized'
Plug 'tpope/vim-surround'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'leafgarland/typescript-vim'

" Plug 'christoomey/vim-tmux-navigator'
" Plug 'kchmck/vim-coffee-script'

" plugins used at slack
Plug 'w0rp/ale'
Plug 'hhvm/vim-hack'
Plug 'blueyed/smarty.vim'
Plug 'editorconfig/editorconfig-vim'

call plug#end()

set background=dark
colorscheme solarized

" Our custom hackfmt wrapper doesn't play well with ALE's builtin hackfmt fixer
function! Slackfmt(buffer) abort
    let l:executable ='~/webapp/bin/hackfmt'
    return {'command': ale#Escape(l:executable) . ' %t -i %s', 'read_temporary_file': 1,}
endfunction
let g:ale_fixers={'hack': ['Slackfmt']}

let g:ale_fix_on_save=1

" Let me finish typing before you complain at me!
let g:ale_lint_on_text_changed='normal'
let g:ale_lint_on_insert_leave=1

let g:ale_fixers={'javascript': ['prettier', 'eslint'],  'json': ['prettier']}

set ttyfast
set lazyredraw              " Don't update while in macro
set autoindent              " auto indent
set smarttab                " tab and backspace are smart

" set smartindent " might be annoying...
"set expandtab               " expand tabs to spaces
"set tabstop=4
"set softtabstop=4
"set shiftwidth=4
"autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2

noremap - :nohls<cr>
map Y y$

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

set magic
" make /, ?, s/ (and %s/) very magic
" :nnoremap / /\v
" :nnoremap ? ?\v
" :cnoremap %s/ %s/\v
" :ca ss %s/\v

" Set > and < to not use operator-pending mode
" noremap > >>
" noremap < <<

" trim whitespace on save
" autocmd BufWritePre * :%s/\s\+$//e

set textwidth=0
set wrap
set number
set titlestring=%f title    " Display filename in terminal window
set showcmd                 " Show commands at bottom right
set showmatch               " Show matching brackets.

if has("wildmenu")
    "set wildmode=full wildmenu " command-line tab completion
    "set completeopt=longest,menu,menuone
    set wildmenu
    set wildmode=longest:list,full
    set wildignore+=*.a,*.o
    set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
    set wildignore+=.DS_Store,.git,.hg,.svn
    set wildignore+=*~,*.swp,*.tmp
    set infercase
endif

" Make sure that unsaved buffers that are to be put in the background are
" allowed to go in there (ie. the "must save first" error doesn't come up)
set hidden

" Show the current mode
set showmode

" javascript: 2space indent
" autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2

" indent typescript with two spaces
" autocmd FileType typescript setlocal shiftwidth=2 tabstop=2

" Disable syntax highlight for files larger than 50 MB
autocmd BufWinEnter * if line2byte(line("$") + 1) > 50000000 | syntax clear | endif

augroup vimrc_autocmds
  " highlight everything past the 100 character mark
  autocmd BufEnter,WinEnter * highlight OverLength ctermbg=236 guibg=#592929
  autocmd BufEnter,WinEnter * let w:m1=matchadd('OverLength', '\%>100v.\+', -1)
  autocmd BufEnter,WinEnter * highlight ExtraWhitespace ctermbg=red guibg=red

  " highlight whitespace at the end of lines
  " autocmd BufEnter,WinEnter * let w:m2=matchadd('ExtraWhitespace', '\s\+$', -1)
  " highlight tabs
  " autocmd BufEnter,WinEnter * let w:m3=matchadd('ExtraWhitespace', '\t\+', -1)
augroup END
